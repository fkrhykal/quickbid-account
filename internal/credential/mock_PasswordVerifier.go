// Code generated by mockery v2.51.1. DO NOT EDIT.

package credential

import mock "github.com/stretchr/testify/mock"

// MockPasswordVerifier is an autogenerated mock type for the PasswordVerifier type
type MockPasswordVerifier struct {
	mock.Mock
}

type MockPasswordVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPasswordVerifier) EXPECT() *MockPasswordVerifier_Expecter {
	return &MockPasswordVerifier_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function with given fields: hashedPassword, password
func (_m *MockPasswordVerifier) Verify(hashedPassword string, password string) error {
	ret := _m.Called(hashedPassword, password)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hashedPassword, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPasswordVerifier_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockPasswordVerifier_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - hashedPassword string
//   - password string
func (_e *MockPasswordVerifier_Expecter) Verify(hashedPassword interface{}, password interface{}) *MockPasswordVerifier_Verify_Call {
	return &MockPasswordVerifier_Verify_Call{Call: _e.mock.On("Verify", hashedPassword, password)}
}

func (_c *MockPasswordVerifier_Verify_Call) Run(run func(hashedPassword string, password string)) *MockPasswordVerifier_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockPasswordVerifier_Verify_Call) Return(_a0 error) *MockPasswordVerifier_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordVerifier_Verify_Call) RunAndReturn(run func(string, string) error) *MockPasswordVerifier_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPasswordVerifier creates a new instance of MockPasswordVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPasswordVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPasswordVerifier {
	mock := &MockPasswordVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
